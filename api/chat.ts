import type { VercelRequest, VercelResponse } from '@vercel/node'
import { createClient } from '@supabase/supabase-js'

const GEMINI_API_KEY = process.env.GEMINI_API_KEY
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent'

// Inicializar Supabase (usar variables sin prefijo VITE_ para backend)
const supabase = createClient(
  process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

// Funci√≥n para buscar productos
async function searchProducts(query: string, limit = 5) {
  try {
    const { data, error } = await supabase
      .from('productos')
      .select('id, nombre, precio, imagen, descripcion, stock')
      .or(`nombre.ilike.%${query}%,descripcion.ilike.%${query}%`)
      .eq('activo', true)
      .gt('stock', 0)
      .limit(limit)

    if (error) {
      console.error('Error buscando productos:', error)
      return []
    }

    // Mapear 'imagen' a 'imagen_url' para compatibilidad con el frontend
    const products = (data || []).map(product => ({
      ...product,
      imagen_url: product.imagen
    }))

    return products
  } catch (error) {
    console.error('Error en searchProducts:', error)
    return []
  }
}

// Sistema de prompts con contexto de Mercadillo
const SYSTEM_PROMPT = `Eres un asistente virtual amable y servicial de Mercadillo, una tienda online en Lima, Per√∫.

INFORMACI√ìN IMPORTANTE SOBRE MERCADILLO:

üè™ CATEGOR√çAS DISPONIBLES (SOLO ESTAS, NO INVENTES OTRAS):
- Todos (ver todos los productos)
- Electr√≥nicos (laptops, smartphones, tablets, accesorios tecnol√≥gicos)
- Ropa (camisetas, zapatillas, ropa deportiva, moda)
- Hogar (muebles, decoraci√≥n, sof√°s, mesas)
- Deportes (equipos deportivos, pelotas, raquetas, accesorios)
- Libros (libros f√≠sicos y material educativo)
- Otros (productos diversos que no encajan en las categor√≠as anteriores)

üì¶ PRODUCTOS:
- Vendemos productos variados en las categor√≠as mencionadas arriba
- Los usuarios pueden explorar el cat√°logo completo en /catalogo
- Cada producto tiene descripci√≥n, precio, im√°genes y rese√±as
- Puedo buscar productos si me dicen qu√© est√°n buscando (ejemplo: "busca laptops" o "mu√©strame aud√≠fonos")
- IMPORTANTE: Solo menciona categor√≠as que existen (Electr√≥nicos, Ropa, Hogar, Deportes, Libros, Otros)

üìÑ P√ÅGINAS DE LA TIENDA:
P√öBLICAS:
- / (Inicio - p√°gina principal)
- /catalogo (Cat√°logo completo de productos)
- /producto/:id (Detalle de un producto espec√≠fico)
- /carrito (Carrito de compras)
- /sobre-nosotros (Sobre Mercadillo)
- /contacto (Formulario de contacto)
- /terminos (T√©rminos y condiciones)
- /privacidad (Pol√≠tica de privacidad)
- /envios (Informaci√≥n de env√≠os)

REQUIEREN CUENTA:
- /checkout (Proceso de pago)
- /perfil (Perfil del usuario)
- /perfil/lista-deseos (Lista de productos favoritos)
- /perfil/pedidos (Historial de pedidos)
- /perfil/rese√±as (Rese√±as escritas por el usuario)
- /perfil/historial (Historial de navegaci√≥n)
- /perfil/direcciones (Gesti√≥n de direcciones de env√≠o)
- /perfil/configuracion (Configuraci√≥n del perfil)

SOLO ADMINISTRADORES:
- /admin (Panel de administraci√≥n)

üöö ENV√çOS:
- Hacemos env√≠os a todo Lima, Per√∫
- El costo y tiempo de env√≠o dependen del distrito
- Los usuarios pueden configurar m√∫ltiples direcciones de env√≠o en /perfil/direcciones
- Para m√°s informaci√≥n sobre env√≠os, visita /envios

üí≥ PAGOS:
- Aceptamos pagos a trav√©s de Mercado Pago
- M√©todos disponibles: tarjetas de cr√©dito/d√©bito, Yape, Plin, transferencias bancarias
- El proceso de pago es seguro y encriptado
- El checkout est√° en /checkout (requiere iniciar sesi√≥n)

üë§ CUENTA DE USUARIO:
- Los usuarios pueden registrarse con email o Google en /sign-up
- Pueden iniciar sesi√≥n en /sign-in
- Gestionar perfil completo en /perfil
- Sistema de rese√±as con estrellas (1-5) - ver en /perfil/rese√±as
- Lista de deseos en /perfil/lista-deseos
- Historial de pedidos en /perfil/pedidos

‚≠ê CARACTER√çSTICAS:
- Lista de deseos para guardar productos favoritos
- Historial de navegaci√≥n de productos visitados
- Sistema de rese√±as con estrellas (1-5)
- Carrito de compras persistente
- Notificaciones de stock y promociones

üì± CONTACTO Y AYUDA:
- Formulario de contacto en /contacto
- Informaci√≥n sobre nosotros en /sobre-nosotros
- T√©rminos y condiciones en /terminos
- Pol√≠tica de privacidad en /privacidad

TU ROL:
- Responde de forma amigable y profesional
- Usa emojis ocasionalmente para ser m√°s c√°lido üòä
- Si no sabes algo, s√© honesto y sugiere contactar al equipo de soporte en /contacto
- Ayuda a los usuarios a navegar por la tienda usando las rutas exactas
- Recomienda productos SOLO de las categor√≠as que existen
- Si preguntan sobre un producto espec√≠fico, p√≠deles m√°s detalles o sugiere que busquen en /catalogo
- Mant√©n las respuestas concisas pero informativas (m√°ximo 3-4 l√≠neas)
- Cuando menciones p√°ginas, usa las rutas exactas (ejemplo: "visita /catalogo")

TONO:
- Amigable y cercano (tutea al usuario)
- Profesional pero no formal en exceso
- Entusiasta sobre los productos
- Emp√°tico con las dudas del usuario

IMPORTANTE - REGLAS ESTRICTAS:
- NUNCA menciones categor√≠as que no sean: Electr√≥nicos, Ropa, Hogar, Deportes, Libros, Otros
- NO inventes categor√≠as como "Tecnolog√≠a", "Moda", "Decoraci√≥n", etc.
- Si te preguntan sobre precios espec√≠ficos, diles que los precios est√°n en /catalogo
- Si preguntan sobre stock, recomi√©ndales ver el producto en la web
- Para pedidos espec√≠ficos, sugiere revisar /perfil/pedidos
- Para problemas t√©cnicos o quejas, sugiere contactar en /contacto
- Si mencionas una p√°gina, SIEMPRE usa la ruta exacta (ej: /catalogo, /perfil/lista-deseos)
`

interface Message {
  role: 'user' | 'assistant'
  content: string
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  // Solo permitir m√©todo POST
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  // Verificar API key
  if (!GEMINI_API_KEY) {
    console.error('GEMINI_API_KEY no est√° configurada')
    return res.status(500).json({ 
      error: 'Configuraci√≥n del servidor incompleta',
      response: 'Lo siento, el servicio de chat no est√° disponible en este momento. Por favor, contacta a soporte.' 
    })
  }

  try {
    const { message, history = [], userId, sessionId } = req.body

    if (!message || typeof message !== 'string') {
      return res.status(400).json({ error: 'Mensaje inv√°lido' })
    }

    // Detectar si el usuario pide b√∫squeda de productos
    const searchKeywords = ['busca', 'buscar', 'muestra', 'mu√©strame', 'quiero ver', 'productos de', 'tienes', 'venden', 'hay']
    const isProductSearch = searchKeywords.some(keyword => message.toLowerCase().includes(keyword))
    
    let productos: any[] = []
    if (isProductSearch) {
      // Extraer t√©rmino de b√∫squeda (simplificado)
      const searchTerms = message
        .toLowerCase()
        .replace(/busca|buscar|muestra|mu√©strame|quiero ver|productos de|tienes|venden|hay/gi, '')
        .trim()
      
      if (searchTerms.length > 2) {
        productos = await searchProducts(searchTerms)
      }
    }

    // Construir el historial de conversaci√≥n para contexto
    const conversationHistory = history
      .slice(-5) // √öltimos 5 mensajes para no exceder l√≠mites
      .map((msg: Message) => ({
        role: msg.role === 'user' ? 'user' : 'model',
        parts: [{ text: msg.content }]
      }))

    // Preparar el request para Gemini
    const geminiRequest = {
      contents: [
        {
          role: 'user',
          parts: [{ text: SYSTEM_PROMPT }]
        },
        ...conversationHistory,
        {
          role: 'user',
          parts: [{ text: message }]
        }
      ],
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 1024,
      },
      safetySettings: [
        {
          category: 'HARM_CATEGORY_HARASSMENT',
          threshold: 'BLOCK_MEDIUM_AND_ABOVE'
        },
        {
          category: 'HARM_CATEGORY_HATE_SPEECH',
          threshold: 'BLOCK_MEDIUM_AND_ABOVE'
        }
      ]
    }

    // Llamar a la API de Gemini
    const geminiResponse = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(geminiRequest)
    })

    if (!geminiResponse.ok) {
      const errorData = await geminiResponse.json()
      console.error('Error de Gemini API:', errorData)
      
      // Si es error de rate limit
      if (geminiResponse.status === 429) {
        return res.status(200).json({
          response: 'Estoy recibiendo muchas consultas en este momento üòÖ Por favor, intenta de nuevo en unos segundos.'
        })
      }
      
      throw new Error(`Gemini API error: ${geminiResponse.status}`)
    }

    const data = await geminiResponse.json()
    
    // Extraer la respuesta
    const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text

    if (!aiResponse) {
      console.error('Respuesta de Gemini vac√≠a:', data)
      return res.status(200).json({
        response: 'Lo siento, no pude procesar tu mensaje. ¬øPodr√≠as reformular tu pregunta?'
      })
    }

    // Guardar conversaci√≥n en Supabase (sin bloquear la respuesta)
    supabase
      .from('chat_conversations')
      .insert({
        usuario_id: userId || null,
        mensaje: message,
        respuesta: aiResponse.trim(),
        session_id: sessionId || `session_${Date.now()}`,
        metadata: {
          model: 'gemini-2.0-flash',
          timestamp: new Date().toISOString(),
          historyLength: history.length,
          productsFound: productos.length
        }
      })
      .then(({ error }) => {
        if (error) {
          console.error('Error guardando conversaci√≥n:', error)
        }
      })

    return res.status(200).json({
      response: aiResponse.trim(),
      products: productos.length > 0 ? productos : undefined
    })

  } catch (error) {
    console.error('Error en chat endpoint:', error)
    const errorMessage = error instanceof Error ? error.message : 'Error desconocido'
    console.error('Detalles del error:', errorMessage)
    
    return res.status(200).json({
      response: `Lo siento, hubo un problema al procesar tu mensaje. ${process.env.NODE_ENV === 'development' ? `Error: ${errorMessage}` : 'Por favor, intenta de nuevo o contacta a nuestro equipo de soporte.'}`
    })
  }
}
